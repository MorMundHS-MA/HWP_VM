LOAD 14 ; R0 = 20
MOV 4 0; n(R4) = 20
JSR Fibonacci
;int(R0) Fibonacci(int n(R4))
LABEL Fibonacci
;n => R4
;save n
PUSH 4
;int fib = 0
;fib => R3
LOAD 0 ; R0 = 0
MOV 3 0 ; R3 = 0
;if (n > 0)
; n => R0
MOV 0 4
JIZ ElifGZ
; n - 1 => R1
; 1 => R0
MOV 1 0
LOAD 1 ;R0 = 1
SUB 1 0
; n - 1 => R0
MOV 0 1
;if(n == 1)
JIZ NIsOne
; n - 2 => R2
LOAD 1 ; R0 = 1
MOV 2 1 ; R2 = n - 1
SUB 2 0 ; R2 = n - 2
; Save n -2
PUSH 2
;Fibonacci(n - 1)
MOV 4 1
JSR Fibonacci
; restore (n -2) as R4(param)
POP 4
; save RO(result)
PUSH 0
;Fibonacci(n - 2)
JSR Fibonacci
; restore result in R3(fib)
POP 3
; fib = Fibonacci(n - 1) + Fibonacci(n - 2);
ADD 3 0
LABEL NIsOne ; End if => if (n == 1)
;fib(R3) = 1
LOAD 1 ; RO = 1
MOV 3 0 ; R3 = 1
LABEL ElifGZ ; End if => if (n > 0)
;*(1000 + (n * 4)) get address
LOAD 4 ; R0 = 4
; Restore n in R4
POP 4
MUL 4 0 ; R4 = n * 4
LOAD 3E8 ; R0 = 1000
ADD 4 0 ; R4 = (1000 + (n * 4))
MOV 4 3 ToMem ; *(1000 + (n * 4)) = fib;
MOV 0 3 ; Return value = fib
RTS