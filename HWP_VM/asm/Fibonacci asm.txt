;//ushort fibTable[20];
;//Fibonacci(20);
LOAD 14 ;  R0 = 20
MOV 4 0 ;  n <=> R4 = 20
JSR Fibonacci
RTS ; End Program
;//ushort Fibonacci(ushort n)
LABEL Fibonacci
;n <=> R4
;save n
PUSH 4
;//{
;//	ushort fib = 0, fib1,fib2;
;// ret = R0, fib = R1, fib1 = R2, fib2 = R3,n = R4
LOAD 0 ; R0 = 0
;// fib = 0
MOV 1 0 ; fib <=> R3 = 0
;//	if (n != 0)
MOV 0 4; n <=> R4 => R0
JIZ ElifGZ ; Jump to endif if n = 0
;//	{	
;//		if (n != 1)
;//		{
LOAD 1 ; R0 = 1
MOV 5 0	; R5 = 1
MOV 0 4 ; R0 = n
SUB 0 5 ; R0 = n - 1
JIZ NIsOne ; Jump to else if n = 1
PUSH 0 ; Save n - 1
MOV 7 0 ; R7 = n - 1
;//			if(fibTable[n - 1] != 0)
MOV 5 0 ; GetTabAddress(n = n - 1)
JSR GetTabAddress ; R0 = table address
MOV 5 0 ; R5 = tableAddress
MOV 0 5 FromMem ; R0 = [R5]
JIZ TabM1IsNull
;//			{
;//				fib1 = fibTable[n - 1];		
MOV 2 0 ; fib1 = R0
JMP TabM1Elif ; goto elif
;//			}
;//			else
;//			{
LABEL TabM1IsNull
;//				fib1 = Fibonacci(n - 1);
MOV 4 7 ; R4 <=> n = n - 1	
JSR Fibonacci
MOV 2 0 ; fib1 = R0 <=> ret
;//			}
LABEL TabM1Elif
;//
LOAD 1 ; R0 = 1
MOV 5 0	; R5 = 1
POP 0 ; R0 = load n - 1
SUB 0 5 ; R0 = n - 2
MOV 4 0 ; R4 = n - 2
;//			if (fibTable[n - 2] != 0)
MOV 5 0 ; GetTabAddress(R5 <=> n = n - 2)
JSR GetTabAddress ; R0 = table address
MOV 5 0 ; R5 = tableAddress
MOV 0 5 FromMem ; R0 = [R5]
JIZ TabM2IsNull
;//			{
;//				fib2 = fibTable[n - 2];
MOV 3 0 ; fib2 = R0
JMP TabM2Elif ; goto elif
;//			}
;//			else
;//			{
LABEL TabM2IsNull
;//				fib2 = Fibonacci(n - 2);
PUSH 2 ; Save fib1
JSR Fibonacci
MOV 3 0 ; fib2 = R0 <=> ret
POP 2 ; Load fib1
;//			}
LABEL TabM2Elif
;//			fib = fib1 + fib2;
ADD 2 3 ; fib1 = fib1 + fib2
MOV 1 2 ; fib = fib1 + fib2
JMP ElifGZ ; goto elif
;//		}
;//		else
;//		{
LABEL NIsOne
;//			fib = 1;
LOAD 1 ; R0 = 1
MOV 1 0 ; fib <=> R1 = 1
;//		}
;//	}
LABEL ElifGZ ; Endif => if (n > 0)
;//	
;//	fibTable[n] = fib;
POP 5 ; Load n
JSR GetTabAddress ; R0 = ret
MOV 0 1 ToMem ; fibTable[n] = fib;
;//	return fib;
MOV 0 1 ; ret = fib
RTS 
;//}
;// ushort GetTabAddress(int n)
;//{
LABEL GetTabAddress
; ret <=> R0
; n <=> R5
; offset <=> R6
;//	 return 1000 + n*2;
LOAD 2 ; R0 = 2 <=> sizeof(uint) 
MOV 6 0 ; R6 <=> offset =  sizeof(uint)
MUL 6 5 ; R6 = 2 * n
LOAD 3E8 ; R0 = fibTable @ 1000/0x3E8
ADD 0 6 ; R0 = fibTable + offset
RTS
;//}